#List local Images 
docker images

#Log in to a remote registry 
docker login RegistryURL -u user -p password

#Pull an image from a remote registry
docker pull registry.redhat.io/rhel8/httpd-24

#Run a container with Podman  
docker run -d -it -p 80:80 -v /nfs:/var/www/html registry.redhat.io/rhel8/httpd-24

#List the running containers 
docker ps

#Execute a command in a running container 
docker exec -it containerid /bin/bash

#Execute a command by root in a running container 
docker exec -u 0 -it a34b5708919d /bin/bash

#Display the logs of a container 
docker logs containerid

#Save an image 
docker save -o /path containerid

#Load an image 
docker load -i /path

#Start an existing container 
docker start containerid

#Stop an existing container 
docker stop containerid

#Restart an existing container 
docker restart containerid

#Remove a container 
docker rm containerid

#Remove a container image 
docker rmi containerimages

#Podman version 
docker version

#Log out 
docker logout

#Create a new image based on the current state of a running container 
docker run -rm -it [–name name] image:tag command  

#Create a new image based on the current state of a running container 
docker commit container newImage:tag 

#Create (but don’t start) a container from an image 
docker create [-name name] image:tag

#Restart an existing container 
docker restart container

#Wait on one or more containers to stop 
docker wait container1 [container2…]

#Stop a running container gracefully 
docker stop container

#Send a signal to a running container 
docker kill container

#Remove a container (use -f if the container is running) 
docker rm [-f] container

#Display a live stream of a container’s resource usage 
docker stats container

#Return metadata (in JSON) about a running container 
docker inspect container

#Processors running on Docker
docker top container-id

#Delete volume forcefully
docker volume prune

#Delete container forcefully
docker container prune

#Specify the docker file if having other name
docker build -f dockerfile.dev .

#


#################################### Docker file ##############################

FROM ubuntu:18.04    #Add base image
LABEL name vaibhav  #Add name labels to container
LABEL email vvgadhave@gmail.com    #Add email label
ENV NAME vaibhav    #Add enviroment variables
ENV PASS Passwd@123#    #Add enviroment variables 
RUN pwd > /home/test.txt  # (/) Run command 
WORKDIR /tmp   # Change working directory, default may be /
RUN pwd > /home/test.txt  #(/tmp) output after changing working directory
USER vaibhavg  # Switch user from root to vaibhavg
COPY test.txt /tmp/  #Copy local test.txt file from local to container /tmp/ 
ADD test.txt.tar /tmp  #Extract contents from test.txt.tar in /tmp
CMD ["python"]  #Run any specific command in container
CMD ["/bin/bash"]  # If having multiple CMD in docker file then last CMD will execute when container is up
ENTRYPOINT ["test.sh"] # Executes as soon as the container is up 

#################################### Docker compose file ##############################

version: '2.2'
services:
  node01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    container_name: node01
    environment:
      - node.name=node01
      - cluster.name=es-cluster-7
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms128m -Xmx128m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - es-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.11.1
    environment:
      ELASTICSEARCH_HOSTS: http://node01:9200  
    ports:
      - 5601:5601
    networks:
      - es-network
    depends_on:
      - node01
    restart: always     #(no = never restart | always = if container stops for nay reason | on-failure = only restart if stops by any error code | unless-stopped = always restart wnless we forcefully stop it )

  heartbeat:
    image: docker.elastic.co/beats/heartbeat:7.11.1
    environment:
      ELASTICSEARCH_HOSTS: http://node01:9200
    volumes:
      - /home/vaibhavg/kibana/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro
    networks:
      - es-network
    depends_on:
      - node01
    

volumes:
  es-data01:
    driver: local

networks:
  es-network:
    driver: bridge
#################################### JFYI ##############################

# Install ssh server in conatiner
RUN apt install openssh-server -y  
EXPOSE 22
CMD ["/usr/sbin/sshd", "-D"]

########################################################################




















